from aiogram.types import CallbackQuery
from src.keyboard import (
    get_main_keyboard,
    get_submenu_keyboard,
    get_identity_choice_keyboard
)
from src.handlers.utils import save_feedback_state, send_or_edit_media
from src.logger import setup_logger
from src.services.redis_client import redis_client
from aiogram.types.input_file import FSInputFile


logger = setup_logger(__name__)

categories = ["–î–æ–∫—É–º–µ–Ω—Ç—ã", "–£—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å", "–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã", "–î—Ä—É–≥–æ–µ"]

category_pictures = {
    "–î–æ–∫—É–º–µ–Ω—Ç—ã": "images/documents.jpg",
    "–£—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å": "images/study.jpg",
    "–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã": "images/support.jpg",
    "–î—Ä—É–≥–æ–µ": "images/other.webp",
}

category_texts = {
    "–î–æ–∫—É–º–µ–Ω—Ç—ã": "–¢–µ–±–µ –ø–æ–º–æ–∂–µ—Ç —É—á–µ–±–Ω—ã–π –æ—Ç–¥–µ–ª, –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 4 —ç—Ç–∞–∂–µ —Ä—è–¥–æ–º —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º 4.2",
    "–£—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å": "–¢—ã –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –Ω–∞ —Å–≤–æ—é –∫–∞—Ñ–µ–¥—Ä—É. –û–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 4 —ç—Ç–∞–∂–µ –Ω–∞–ø—Ä–æ—Ç–∏–≤ —Å—Ç–æ–ª–æ–≤–æ–π",
    "–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã": "–û–±—Ä–∞—Ç–∏—Å—å –≤ –∫–∞–±–∏–Ω–µ—Ç —Å–ª—É–∂–±—ã –∑–∞–±–æ—Ç—ã –Ω–∞ 3 —ç—Ç–∞–∂–µ —Ä—è–¥–æ–º —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º 3.8",
    "–î—Ä—É–≥–æ–µ": "–†–∞–∑–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è.",
}

def safe_decode(value):
    return value.decode("utf-8") if isinstance(value, bytes) else value

async def callback_handler(callback: CallbackQuery):
    data = callback.data
    user_id = callback.from_user.id
    logger.info(f"Callback received from user {user_id} with data: {data}")

    async def save_menu_id(msg):
        await save_feedback_state(user_id, menu_message_id=msg.message_id)
        logger.info(f"Menu message id={msg.message_id} saved for user {user_id}")

    # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if data.startswith("reply_to_user:"):
        try:
            target_user_id = int(data.split(":", 1)[1])
            await redis_client.set(f"admin_replying:{user_id}", target_user_id, ex=1800)

            new_text = callback.message.text + "\n\n–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —è –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—é"
            await callback.message.edit_text(new_text)

            logger.info(f"Admin {user_id} replying to user {target_user_id}")
        except ValueError:
            logger.error(f"Invalid user ID in reply_to_user: {data}")
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID", show_alert=True)
        return

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "back_to_main":
        msg = await send_or_edit_media(
            callback.message,
            "images/other.webp",
            f"–ü—Ä–∏–≤–µ—Ç, {callback.from_user.full_name}!\n–Ø –∑–Ω–∞—é, —á—Ç–æ —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ–≥–æ —Ä–µ—à–∏—Ç—å ‚ù§Ô∏è",
            get_main_keyboard()
        )
        await save_menu_id(msg)
        await callback.answer()
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    if data == "ignore":
        await callback.answer("–í—ã —É–∂–µ –∑–¥–µ—Å—å üòâ", show_alert=True)
        logger.info(f"User {user_id} pressed ignore")
        return

    # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º –ª–∏—á–Ω–æ—Å—Ç–∏
    if data in ["–ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ—Ö–Ω–∏–∫–æ–π", "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"]:
        await redis_client.set(f"feedback_type:{user_id}", data, ex=300)

        msg = await send_or_edit_media(
            callback.message,
            category_pictures.get(data, "images/other.webp"),
            "–•–æ—á–µ—à—å –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–æ–º –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—ë –∏–º—è?",
            get_identity_choice_keyboard()
        )
        await save_feedback_state(user_id, menu_message_id=msg.message_id)

        await callback.answer()
        return

    # –í—ã–±–æ—Ä: –∞–Ω–æ–Ω–∏–º–Ω–æ –∏–ª–∏ —Å –∏–º–µ–Ω–µ–º
    if data in ["send_anonymous", "send_named"]:
        feedback_type = await redis_client.get(f"feedback_type:{user_id}")
        if not feedback_type:
            await callback.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", show_alert=True)
            return

        decoded_type = safe_decode(feedback_type)
        is_named = data == "send_named"

        await save_feedback_state(user_id, type=decoded_type, is_named=is_named)

        picture_path = category_pictures.get(decoded_type, "images/other.webp")

        from aiogram.types import InputMediaPhoto

        await callback.message.edit_media(
            media=InputMediaPhoto(
                media=FSInputFile(picture_path),
                caption=f"–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –ø–æ —Ç–µ–º–µ '{decoded_type}':"
            ),
            reply_markup=None
        )


        await save_feedback_state(user_id, prompt_message_id=callback.message.message_id)

        logger.info(f"Feedback prompt sent to user {user_id} (named={is_named}) for type {decoded_type}")
        await callback.answer()
        return


    # –ü–æ–¥–º–µ–Ω—é "–î—Ä—É–≥–æ–µ"
    if data == "–î—Ä—É–≥–æ–µ":
        msg = await send_or_edit_media(
            callback.message,
            category_pictures["–î—Ä—É–≥–æ–µ"],
            category_texts["–î—Ä—É–≥–æ–µ"],
            get_submenu_keyboard("–î—Ä—É–≥–æ–µ")
        )
        await save_menu_id(msg)
        await callback.answer()
        return

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if data in categories:
        msg = await send_or_edit_media(
            callback.message,
            category_pictures[data],
            category_texts[data],
            get_main_keyboard(disabled_category=data)
        )
        await save_menu_id(msg)
        await callback.answer()
        return

    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    logger.warning(f"Unknown callback data received: {data}")
    await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
