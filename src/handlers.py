import os
from aiogram import types
from aiogram.types import FSInputFile, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton
from src.keyboard import get_main_keyboard, get_submenu_keyboard

categories = ["–î–æ–∫—É–º–µ–Ω—Ç—ã", "–£—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å", "–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã", "–î—Ä—É–≥–æ–µ"]

category_pictures = {
    "–î–æ–∫—É–º–µ–Ω—Ç—ã": "images/documents.jpg",
    "–£—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å": "images/study.jpg",
    "–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã": "images/support.jpg",
    "–î—Ä—É–≥–æ–µ": "images/other.webp",
}

category_texts = {
    "–î–æ–∫—É–º–µ–Ω—Ç—ã": "–¢–µ–±–µ –ø–æ–º–æ–∂–µ—Ç —É—á–µ–±–Ω—ã–π –æ—Ç–¥–µ–ª, –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 4 —ç—Ç–∞–∂–µ —Ä—è–¥–æ–º —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º 4.2",
    "–£—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å": "–¢—ã –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –Ω–∞ —Å–≤–æ—é –∫–∞—Ñ–µ–¥—Ä—É. –û–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 4 —ç—Ç–∞–∂–µ –Ω–∞–ø—Ä–æ—Ç–∏–≤ —Å—Ç–æ–ª–æ–≤–æ–π",
    "–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã": "–û–±—Ä–∞—Ç–∏—Å—å –≤ –∫–∞–±–∏–Ω–µ—Ç —Å–ª—É–∂–±—ã –∑–∞–±–æ—Ç—ã –Ω–∞ 3 —ç—Ç–∞–∂–µ —Ä—è–¥–æ–º —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º 3.8",
    "–î—Ä—É–≥–æ–µ": "–†–∞–∑–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è.",
}

# user_feedback_waiting: user_id -> dict —Å –ø–æ–ª—è–º–∏: type, prompt_message_id, menu_message_id
user_feedback_waiting = {}


async def start_handler(message: types.Message):
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
        "–Ø –∑–Ω–∞—é, —á—Ç–æ —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ–≥–æ —Ä–µ—à–∏—Ç—å ‚ù§Ô∏è"
    )
    photo_path = "images/other.webp"

    sent = await message.answer_photo(
        photo=FSInputFile(photo_path),
        caption=welcome_text,
        reply_markup=get_main_keyboard()
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é
    user_feedback_waiting[message.from_user.id] = {"menu_message_id": sent.message_id}


async def callback_handler(callback: types.CallbackQuery):
    data = callback.data
    user_id = callback.from_user.id

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è message_id –º–µ–Ω—é
    async def save_menu_message(message: types.Message):
        if user_id in user_feedback_waiting:
            user_feedback_waiting[user_id]["menu_message_id"] = message.message_id
        else:
            user_feedback_waiting[user_id] = {"menu_message_id": message.message_id}

    if data == "back_to_main":
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {callback.from_user.full_name}!\n"
            "–Ø –∑–Ω–∞—é, —á—Ç–æ —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ–≥–æ —Ä–µ—à–∏—Ç—å ‚ù§Ô∏è"
        )
        photo_path = "images/other.webp"

        media = InputMediaPhoto(media=FSInputFile(photo_path), caption=welcome_text)

        try:
            await callback.message.edit_reply_markup(reply_markup=None)
            await callback.message.edit_media(media=media, reply_markup=get_main_keyboard())
            await save_menu_message(callback.message)
        except Exception:
            sent = await callback.message.answer_photo(
                photo=FSInputFile(photo_path),
                caption=welcome_text,
                reply_markup=get_main_keyboard()
            )
            await save_menu_message(sent)

        await callback.answer()
        return

    if data == "ignore":
        await callback.answer("–í—ã —É–∂–µ –∑–¥–µ—Å—å üòâ", show_alert=True)
        return

    if data in ["–ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ—Ö–Ω–∏–∫–æ–π", "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"]:
        prompt_msg = await callback.message.answer(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ '{data}':"
        )
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º
        if user_id in user_feedback_waiting:
            user_feedback_waiting[user_id].update({
                "type": data,
                "prompt_message_id": prompt_msg.message_id,
            })
        else:
            user_feedback_waiting[user_id] = {
                "type": data,
                "prompt_message_id": prompt_msg.message_id,
            }
        await callback.answer()
        return

    if data == "–î—Ä—É–≥–æ–µ":
        text = category_texts.get("–î—Ä—É–≥–æ–µ", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        photo_path = category_pictures.get("–î—Ä—É–≥–æ–µ")
        submenu = get_submenu_keyboard("–î—Ä—É–≥–æ–µ")

        if photo_path:
            media = InputMediaPhoto(media=FSInputFile(photo_path), caption=text)
            try:
                await callback.message.edit_reply_markup(reply_markup=None)
                await callback.message.edit_media(media=media, reply_markup=submenu)
                await save_menu_message(callback.message)
            except Exception:
                sent = await callback.message.answer_photo(
                    photo=FSInputFile(photo_path),
                    caption=text,
                    reply_markup=submenu
                )
                await save_menu_message(sent)
        else:
            try:
                await callback.message.edit_text(text=text, reply_markup=submenu)
                await save_menu_message(callback.message)
            except Exception:
                sent = await callback.message.answer(text=text, reply_markup=submenu)
                await save_menu_message(sent)

        await callback.answer()
        return

    if data in categories:
        text = category_texts.get(data, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        photo_path = category_pictures.get(data)
        keyboard = get_main_keyboard(disabled_category=data)

        if photo_path:
            media = InputMediaPhoto(media=FSInputFile(photo_path), caption=text)
            try:
                await callback.message.edit_reply_markup(reply_markup=None)
                await callback.message.edit_media(media=media, reply_markup=keyboard)
                await save_menu_message(callback.message)
            except Exception:
                sent = await callback.message.answer_photo(
                    photo=FSInputFile(photo_path),
                    caption=text,
                    reply_markup=keyboard
                )
                await save_menu_message(sent)
        else:
            try:
                await callback.message.edit_text(text=text, reply_markup=keyboard)
                await save_menu_message(callback.message)
            except Exception:
                sent = await callback.message.answer(text=text, reply_markup=keyboard)
                await save_menu_message(sent)

        await callback.answer()
        return

    await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)


async def feedback_message_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_feedback_waiting:
        return

    feedback_data = user_feedback_waiting.pop(user_id)
    feedback_type = feedback_data.get("type")
    prompt_message_id = feedback_data.get("prompt_message_id")
    menu_message_id = feedback_data.get("menu_message_id")

    GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))

    text = (
        f"–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username or message.from_user.full_name}:\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {feedback_type}\n\n"
        f"{message.text}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    await message.bot.send_message(chat_id=GROUP_CHAT_ID, text=text)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
    if prompt_message_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=prompt_message_id)
        except Exception:
            pass

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é (–µ—Å–ª–∏ –º–æ–∂–Ω–æ)
    try:
        await message.delete()
    except Exception:
        pass

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ–Ω—é, –ø–æ–∫–∞–∑—ã–≤–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∏ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    photo_path = "images/other.webp"
    media = InputMediaPhoto(
        media=FSInputFile(photo_path),
        caption="–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
    )

    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

    if menu_message_id:
        try:
            await message.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=menu_message_id,
                media=media,
                reply_markup=back_keyboard
            )
        except Exception:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer_photo(
                photo=FSInputFile(photo_path),
                caption="–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
                reply_markup=back_keyboard
            )
    else:
        await message.answer_photo(
            photo=FSInputFile(photo_path),
            caption="–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            reply_markup=back_keyboard
        )
